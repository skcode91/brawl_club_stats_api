// <auto-generated />
using System;
using Bcs.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bcs.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250411060236_ClubSynchronizationHistory")]
    partial class ClubSynchronizationHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bcs.Domain.Models.Entity.Club", b =>
                {
                    b.Property<string>("Tag")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("BadgeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RequiredTrophies")
                        .HasColumnType("integer");

                    b.Property<int>("Trophies")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Tag");

                    b.HasIndex("Tag")
                        .IsUnique()
                        .HasDatabaseName("IX_Clubs_Tag");

                    b.ToTable("Clubs", (string)null);
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.ClubSynchronizationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClubTag")
                        .IsRequired()
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Trophies")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClubTag");

                    b.ToTable("ClubSynchronizationHistory", (string)null);
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.Player", b =>
                {
                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("ClubTag")
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Trophies")
                        .HasColumnType("integer");

                    b.HasKey("Tag");

                    b.HasIndex("ClubTag");

                    b.HasIndex("Tag")
                        .IsUnique()
                        .HasDatabaseName("IX_Players_Tag");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.PlayerStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubSynchronizationHistoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlayerTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Trophies")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClubSynchronizationHistoryId");

                    b.HasIndex("PlayerTag");

                    b.ToTable("PlayerStats", (string)null);
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.ClubSynchronizationHistory", b =>
                {
                    b.HasOne("Bcs.Domain.Models.Entity.Club", "Club")
                        .WithMany("ClubSynchronizationHistories")
                        .HasForeignKey("ClubTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.Player", b =>
                {
                    b.HasOne("Bcs.Domain.Models.Entity.Club", "Club")
                        .WithMany("Players")
                        .HasForeignKey("ClubTag")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.PlayerStats", b =>
                {
                    b.HasOne("Bcs.Domain.Models.Entity.ClubSynchronizationHistory", "PlayerSynchronizationHistory")
                        .WithMany("PlayerStats")
                        .HasForeignKey("ClubSynchronizationHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bcs.Domain.Models.Entity.Player", "Player")
                        .WithMany("PlayerStats")
                        .HasForeignKey("PlayerTag")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("PlayerSynchronizationHistory");
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.Club", b =>
                {
                    b.Navigation("ClubSynchronizationHistories");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.ClubSynchronizationHistory", b =>
                {
                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("Bcs.Domain.Models.Entity.Player", b =>
                {
                    b.Navigation("PlayerStats");
                });
#pragma warning restore 612, 618
        }
    }
}
